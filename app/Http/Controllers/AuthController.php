<?phpnamespace App\Http\Controllers;use App\Classes\Packages;use App\User;use App\UserPackagePostLimit;use Illuminate\Http\Request;use Illuminate\Support\Facades\Hash;use Illuminate\Support\Facades\Validator;use App\Notifications\Appnotify;use Illuminate\Support\Str;use App\Package;use App\UserPackage;use App\User_car;use Illuminate\Support\Facades\Crypt;class AuthController extends Controller{    public function __construct()    {        $this->middleware('alreadyloggedin')->except('userLogout');    }    public function userLogin($id = null)    {        //   $id =base64_decode($id);        // $id =Crypt::decrypt($id);        $package = null;        if (!empty($id)) {            $id = base64_decode(base64_decode($id));        }        if ($id && is_numeric($id)) {            $package = Package::find($id);        }        return view('frontend.user-login', ["id" => $id, "package" => $package]);    }    public function garageLogin($gr)    {        return view('frontend.user-login', ["gr" => $gr]);    }    public function RentalLogin($car)    {        return view('frontend.user-login', ["car" => $car]);    }    public function ChatLogin($chat)    {        return view('frontend.user-login', compact('chat'));    }    public function BlogLogin($bg)    {        return view('frontend.user-login', ["bg" => $bg]);    }    public function AuctionLogin($ac, $ac_id)    {        return view('frontend.user-login', ["ac" => $ac, "ac_id" => $ac_id]);    }    public function swapLogin($sw, $s_id)    {        return view('frontend.user-login', ["sw" => $sw, "swap_id" => $s_id]);    }    public function userLoginSubmit(Request $request)    {        $request->validate([            'user_email' => 'required',            'user_password' => 'required',        ]);        $user = User::where('email', '=', $request->user_email)->first();        if (!empty($user)) {            if ($user->status == User::active && $user->enabled == 1) {                $check = Hash::check($request->user_password, $user->password);                if ($check) {                    session()->put("userDetails", $user);                    session()->put("usertype", "simple");                    session()->put("userLoggedIn", true);                    session()->save();                    $tab = route('change-package');                    if (session()->has('product')) {                       $tab = route("sell-your-car");                    } else {                        if ($request->package_id != 0 && $request->package_id != Package::basic ) {                            $userStandardPackage = Packages::checkStandardPackage($user->id);                            if (!empty($userStandardPackage)) {                                $package_id = (isset($request->package_id) && $request->package_id != 0 ) ? $request->package_id : Package::basic;                                Packages::updatePackage($userStandardPackage->id,$package_id,$user->id);                            } else {                                Packages::defaultPackages($request,$user->id);                            }                        }                        if ($request->package_id != 0) {                              $tab = route('change-package');                        } else {                            $tab = route('change-package');                        }                    }                                        return response()->json(["status" => 1, "result" => $tab, "g_route" => $request->garage_input, "w_route" => $request->swap_input, "s_id" => base64_decode($request->swap_id), "sell_car" => $request->sell_car, "blog_route" => $request->blog_id, "auction_route" => $request->auction_login, "ac_id" => base64_decode($request->ac_id),"chat_view"=>$request->chat_input]);                                                    } else {                                        return response()->json(["status" => 0, "result" => "invalid password"]);                            }            } else if ($user->status == User::unverfied) {                return response()->json(["status" => 0, "result" => "Please Verify your email"]);            } else {                return response()->json(["status" => 0, "result" => "User has been suspended"]);            }        } else {            return response()->json(["status" => 0, "result" => "invalid email"]);        }    }    public function social_login(Request $request)    {                   $validator = Validator::make($request->all(), [            'email' => 'required',            'username' => 'required',            'profile_pic' => 'required',            'first_name' => 'required',            'last_name' => 'required',            'social_id' => 'required',        ]);        if ($validator->fails()) {            return response()->json(['status' => 0, 'result' => $validator->errors()->all()[0]]);        }        $user = User::where('email', '=', $request->email)->first();        $user_detail = ["email" => $request->email,            "username" => $request->username,            "first_name" => $request->first_name,            "last_name" => $request->last_name,            "avatar" => $request->profile_pic,            "social_id" => $request->social_id,                           'phone'=> +447441427341,                           "enabled" => 1,            "status" => User::active];        if (!empty($user)) {            if ($user->enabled == 1) {                $user_c = User::where("id", "=", $user->id)->update($user_detail);                               if ($request->package_id != 0 && $request->package_id != Package::basic ) {                            $userStandardPackage = Packages::checkStandardPackage($user->id);                            if (!empty($userStandardPackage)) {                                $package_id = (isset($request->package_id) && $request->package_id != 0 ) ? $request->package_id : Package::basic;                                Packages::updatePackage($userStandardPackage->id,$package_id,$user->id);                                                            } else {                                Packages::defaultPackages($request,$user->id);                                                    }                        }            } else {                return response()->json(["status" => 0, "result" => "user has been suspended"]);            }        } else {            $user_c = User::create($user_detail);           Packages::defaultPackages($request,$user_c->id);          // dd($user_c->id);        }        $user = User::where('email', '=', $request->email)->first();        if (!empty($user)) {         Packages::defaultPackages($request,$user->id);            // $package = UserPackage::create([            //     'user_id' => $user->id,            //     'package_id' => 2,            // ]);        }        if ($user_c) {            session()->put("userDetails", $user);            session()->put("usertype", "simple");            session()->put("userLoggedIn", true);            session()->put("socialid", $request->social_id);            session()->save();            $tab = 'packages';            if (session()->has('product')) {                $tab = 'findcar';            } else {                if ($request->package_id != 0) {                    if (UserPackage::where('user_id', $user->id)->exists()) {                        $package = UserPackage::where('user_id', $user->id)->update(['package_id' => $request->package_id]);                    } else {                                         if($request->package_id != 0 && $request->package_id != Package::basic){                                                  $package_id = (isset($request->package_id) && $request->package_id != 0 ) ? $request->package_id : Package::basic;                                Packages::updatePackage($userStandardPackage->id,$package_id,$user->id);                                         }else{                                                Packages::defaultPackages($request,$user_c->id);                                          }                                          }                }                if ($request->package_id != 0) {               $tab = route('change-package');                    //   dd($tab);                } else {                    $tab = route("change-package");                    //    dd($tab);                }            }//            return response()->json(["status" => 1, "result" => route("user-dashboard", ['tab' => $tab]), "g_route" => $request->garage_input, "w_route" => $request->swap_input, "s_id" => base64_decode($request->swap_id), "blog_route" => $request->blog_id]);            return response()->json(["status" => 1, "result" => $tab, "g_route" => $request->garage_input, "w_route" => $request->swap_input, "s_id" => base64_decode($request->swap_id), "blog_route" => $request->blog_id]);        } else {            return response()->json(["status" => 0, "result" => "try again"]);        }    }    public function userLogout()    {        if (!empty(session("userLoggedIn")) && session("userLoggedIn") == true) {            session()->flush();            session()->save();        }        return redirect()->route('frontend-home');    }    public function userRegisterSubmit(Request $request)    {        $tab = null;        $validator = Validator::make($request->all(), [            'email' => 'required|unique:users,email',            'password' => 'required|confirmed',        ]);        if ($validator->fails()) {            return response()->json(['status' => 0, 'result' => $validator->errors()->all()[0]]);        }        $token = Str::random(10);        $user = User::create([            'email' => $request->email,            'password' => Hash::make($request->password),            'username' => strstr($request->email, '@', true),            'email_token' => $token,             'phone'=> +447441427341,            'status' => 4        ]);        Packages::defaultPackages($request , $user->id);        if (!empty($user)) {            $user = User::where('email', '=', $request->email)->first();            $id = base64_encode($user->id);            $tab = 'packages';            if (session()->has('product')) {                $tab = 'findcar';            }            $url = route('confirm_email') . "?id=" . $id . "&token=" . $token . "&tab=" . $tab;            $user->notify(new Appnotify(null, null, $url, null, "User Verification Email."));            $res = "An email has been sent to your inbox.Follow the link in the email we've sent to " . $request->email . " and to verify your account.";            return response()->json(['status' => 1, 'result' => $res]);        } else {            return response()->json(['status' => 0, 'result' => "Please try again", "tab" => ""]);        }    }    public function confirm_email(Request $request)    {        $id = $request->id;        $token = $request->token;        $tab = $request->tab;        $id = base64_decode($id);        $user = User::where("id", '=', $id)->where("email_token", "=", $token)->first();        if ($user) {            $user->status = User::active;            if ($user->save()) {                $user_n = User::find($id);                session()->put("userDetails", $user_n);                session()->put("usertype", "simple");                session()->put("userLoggedIn", true);                session()->save();//                return redirect()->route('user-dashboard', ["tab" => $tab]);                return redirect()->route('change-package');            }        }    }    public function forgottPassword(Request $request)    {        $user = User::where('email', '=', $request->user_email)->first();        if ($user) {            $u_id = $user->id;            $token = Str::random(10);            $user->reset_token = $token;            if ($user->save()) {                $tab = 'change-package';                if (session()->has('product')) {                    $tab = 'findcar';                }                $url = route('new-password') . "?id=" . $u_id . "&token=" . $token . "&tab=" . $tab;                $user->notify(new Appnotify(null, null, $url, true, "Reset Password Notification"));            }            return redirect()->route("user-login")->with('message', 'Please Check Your mail and reset your password by clicking the reset button.');        } else {            return redirect()->back()->with('message_red', 'Email is not recognized.');        }    }    public function newPassword(Request $request)    {        $id = $request->id;        $token = $request->token;        $tab = $request->tab;        $user = User::where("id", "=", $id)->where("reset_token", "=", $token)->first();        if ($user) {            return view('frontend.new-password', ['id' => $id, 'tab' => $tab]);        } else {          return abort(403, 'there is mismatch your token.Please Try again');            // return "there is mismatch your token";        }    }    public function ResendMail($mail)    {        if (!empty($mail)) {            $user = User::where('email', '=', $mail)->first();            $id = base64_encode($user->id);            $token = $user->email_token;            $tab = 'change-package';            if (session()->has('product')) {                $tab = 'findcar';            }            $url = route('confirm_email') . "?id=" . $id . "&token=" . $token . "&tab=" . $tab;            $user->notify(new Appnotify(null, null, $url, null, "User Verification Email."));            return response()->json(['status' => 1, 'result' => "Email has been resend"]);        } else {            return response()->json(['status' => 0, 'result' => "Please try again", "tab" => ""]);        }    }}