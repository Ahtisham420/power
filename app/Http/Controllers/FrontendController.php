<?phpnamespace App\Http\Controllers;use App\User_car;use App\CarSetting;use Illuminate\Http\Request;use App\Package;use App\Career;use App\UserPackage;use App\SwapCar;use App\Post;use App\TermCondition;use App\Comment;use App\PrivacyPolicy;use App\HomeImage;use App\Event;use App\CarComment;use App\FooterMail;use Illuminate\Support\Facades\Session;use Illuminate\Support\Facades\Auth;use App\Misecellinous;use App\Testimonial;use App\SearchRecent;use App\Brand;use App\AuctionBid;use Illuminate\Support\Facades\View;class FrontendController extends Controller{    public function index(Request $request)    {        $result = CarSetting::get();//        $User_car = User_car::orderBy('price', 'ASC')->orderBy('year', 'ASC')->limit(9)->get();        session()->forget('product');        $swap = User_car::with('d_model', 'd_brand')->where("car_availbilty", "=", "Swap")->get()->count();        $swap_car = User_car::with('d_model', 'd_brand')->orderBy('created_at', 'desc')->where("car_availbilty", "=", "Swap")->first();        $american = User_car::with('d_model', 'd_brand')->orderBy('car_availbilty', 'desc')->where("car_availbilty", "=", "American-Muscle")->orderBy('created_at', 'desc')->limit(9)->get();        $auction = User_car::with('CarAuction')->where("car_availbilty", "=", "Auction")->orderBy('created_at', 'desc')->limit(9)->get();        $blog = Post::orderBy('created_at', 'desc')->first();//        $blogcomment = Comment::where('post_id', '=', $blog->id)->first();        $event = Event::orderBy('created_at', 'desc')->first();        $testimonial = Testimonial::orderBy('created_at', 'desc')->first();        $bgimg = HomeImage::where('status', 1)->first();        $testimonial_carasoul = User_car::with('d_model', 'd_brand')->orderBy('created_at', 'desc')->where('featured', '=', '1')->paginate(9);        $rental = User_car::with('d_model', 'd_brand')->orderBy('created_at', 'desc')->where('car_availbilty', '=', 'Rent')->first();        $featured_car = User_car::with('d_model', 'd_brand')->orderBy('created_at', 'desc')->where('featured', '=', '1')->first();        $latest_adds = User_car::with('d_model', 'd_brand')->orderBy('created_at', 'desc')->limit(9)->get();        if (isset($_COOKIE['powerperformance_cookie'])) {            $recent_car = SearchRecent::with('recent_car')->orderBy('created_at', 'desc')->where("cookie_name", "=", $_COOKIE['powerperformance_cookie'])->get();        } else {            $recent_car = null;        }//        return view('frontend.index', ['result' => $result, 'User_car' => $User_car, "american" => $american, "recent_car" => $recent_car, "auction" => $auction, "swap_count" => $swap, "swap_car" => $swap_car, 'blog' => $blog, 'blogcomment' => $blogcomment, 'event' => $event, 'testimonial' => $testimonial, 'featured_car' => $featured_car, 'rental' => $rental, 'bgimg' => $bgimg, 'latest_adds' => $latest_adds, 'testimonial_carasoul' => $testimonial_carasoul]);        return view('frontend.index', ['result' => $result, "american" => $american, "recent_car" => $recent_car, "auction" => $auction, "swap_count" => $swap, "swap_car" => $swap_car, 'blog' => $blog, 'event' => $event, 'testimonial' => $testimonial, 'featured_car' => $featured_car, 'rental' => $rental, 'bgimg' => $bgimg, 'latest_adds' => $latest_adds, 'testimonial_carasoul' => $testimonial_carasoul]);    }    public function swapIndex($query)    {        $result = User_car::with('d_model', 'd_brand')->orderBy('created_at', 'DESC')->whereraw($query)->first();        if (!empty($result)) {            return response()->json(["status" => 1, "result" => $result]);        }        return response()->json(["status" => 0, "result" => ""]);    }    public function misecellinous(Request $request)    {        $misc = Misecellinous::with("brand_misc", "model_misc")->orderBy('created_at', 'desc')->paginate(4);        return view('frontend.misecellinous', ["misc" => $misc]);    }    public function carSellingLease(Request $request)    {        return view('frontend.car-selling-lease');    }    public function blog(Request $request)    {        return view('frontend.blog');    }    public function carSellingAuction(Request $request)    {        return view('frontend.car-selling-auction');    }    public function carSelling(Request $request)    {        return view('frontend.car-selling');    }    public function americanMuscle(Request $request)    {        $tab = "American-Muscle";        $type = new User_car();        $result = $type::with('d_model', 'd_brand')->orderBy('featured', 'desc')->where("car_availbilty", "=", $tab)->paginate(12);        return view('frontend.american-muscle', ['result' => $result]);    }    public  function  CareersView(){        $career = Career::orderBy('created_at','desc')->first();        return view('frontend.careers',compact('career'));    }    public function auctionCars(Request $request)    {        $tab = "auction";        $type = new User_car();        $result = $type::with('d_model', 'd_brand')->orderBy('featured', 'desc')->where("car_availbilty", "=", $tab)->paginate(12);        return view('frontend.auction-cars', ['result' => $result]);    }    public function searchLeaseCars(Request $request)    {        $tab = "Lease";        $type = new User_car();        $result = $type::orderBy('featured', 'desc')->where("car_availbilty", "=", $tab)->paginate(12);        return view('frontend.search-lease-cars', ['result' => $result]);    }            public function TermConditionView(Request $request)    {        $result = TermCondition::orderBy('created_at', 'desc')->where('status',1)->first();        return view('frontend.terms-condition', ['result' => $result]);    }         public function PrivacyPolicyView(Request $request)    {        $result = PrivacyPolicy::orderBy('created_at', 'desc')->where('status',1)->first();        return view('frontend.privacy-policy', ['result' => $result]);    }    public function rentalCars(Request $request)    {        $tab = "Rent";        $type = new User_car();        $result = $type::with('d_model', 'd_brand')->orderBy('featured', 'desc')->where("car_availbilty", "=", $tab)->paginate(12);        return view('frontend.rental-cars', ['result' => $result]);    }    public function classifiedCars(Request $request)    {        $tab = 'Sell';        $type = new User_car();        $result = $type::with('d_model', 'd_brand')->orderBy('featured', 'desc')->where("car_availbilty", "=", $tab)->paginate(12);        return view('frontend.classified-cars', ['result' => $result]);    }    public function PrestigeCars(Request $request)    {        $tab = 'Prestige';        $type = new User_car();        $result = $type::with('d_model', 'd_brand')->orderBy('featured', 'desc')->where("car_availbilty", "=", $tab)->paginate(12);        return view('frontend.prestige-cars', ['result' => $result]);    }    public function filterdDataIndex($search)    {        $type = new User_car();        $result = $type::orderBy('featured', 'desc')->where("post_code", "=", $search)->paginate(12);        $query = "post_code = '$search'";        return view('frontend.demo', ['result' => $result, 'search' => $search, 'query' => $query]);    }    public function priceFilterData($query)    {        $type = new User_car();        if (!empty(session("userLoggedIn")) && session("userLoggedIn") == true) {            $user_car = SwapCar::where("user_id", "=", session('userDetails')->id)->get();            $result = $type::whereraw($query)->where("user_id", "!=", session('userDetails')->id)->get();        } else {            $result = $type::whereraw($query)->get();        }        $user_car_id = array();        if (!empty($user_car)) {            foreach ($user_car as $s) {                $user_car_id[] = $s->swap_list_id;            }        }        if (!empty($result) && count($result) != 0) {            return response()->json(["status" => 1, "result" => $result, "user_car_id" => $user_car_id]);        }        return response()->json(["status" => 0, "result" => ""]);    }    public function filterData($query)    {        $type = new User_car();        if (!empty(session("userLoggedIn")) && session("userLoggedIn") == true) {            $user_car = SwapCar::where("user_id", "=", session('userDetails')->id)->get();            $result = $type::with('CarAuction','d_model', 'd_brand')->where("user_id", "!=", session('userDetails')->id)->whereraw($query)->get();        } else {            $result = $type::with('CarAuction','d_model', 'd_brand')->whereraw($query)->get();        }        $user_car_id = array();        if (!empty($user_car)) {            foreach ($user_car as $s) {                $user_car_id[] = $s->swap_list_id;            }        }        if (!empty($result) && count($result) != 0) {            return response()->json(["status" => 1, "result" => $result, "user_car_id" => $user_car_id]);        }        return response()->json(["status" => 0, "result" => ""]);    }    public function postalData($fill, $col, $type, $raw = null)    {        $table = new User_car();        if ($fill == "null") {            if ($raw == "all") {                if (!empty(session("userLoggedIn")) && session("userLoggedIn") == true) {                    $result = $table::with('CarAuction','d_model', 'd_brand')->orderBy('featured', 'desc')->where('user_id', '!=', session('userDetails')->id)->get();                } else {                    $result = $table::with('CarAuction','d_model', 'd_brand')->orderBy('featured', 'desc')->get();                }            } else {                if (!empty(session("userLoggedIn")) && session("userLoggedIn") == true) {                    $user_car = SwapCar::where("user_id", "=", session('userDetails')->id)->get();                    if (!empty($raw) && $raw !== "all") {                        $result = $table::with('CarAuction','d_model', 'd_brand')->orderBy('featured', 'desc')->where("user_id", "!=", session('userDetails')->id)->whereraw($raw)->get();                    } else {                        if ($type === "featured") {                            $result = $table::with('CarAuction','d_model', 'd_brand')->orderBy('created_at', 'desc')->where('featured', '=', '1')->where("user_id", "!=", session('userDetails')->id)->get();                        } else {                            $result = $table::with('CarAuction','d_model', 'd_brand')->orderBy('featured', 'desc')->where('car_availbilty', '=', $type)->where("user_id", "!=", session('userDetails')->id)->get();                        }                    }                } else {                    if (!empty($raw) && $raw !== "all") {                        $result = $table::with('CarAuction','d_model', 'd_brand')->orderBy('featured', 'desc')->whereraw($raw)->get();                    } else {                        if ($type === "featured") {                            $result = $table::with('CarAuction','d_model', 'd_brand')->orderBy('created_at', 'desc')->where('featured', '=', '1')->get();                        } else {                            $result = $table::with('CarAuction','d_model', 'd_brand')->orderBy('created_at', 'desc')->where('car_availbilty', '=', $type)->get();                        }                    }                }            }        } else {            if ($raw == "all") {                if (!empty(session("userLoggedIn")) && session("userLoggedIn") == true) {                    $result = $table::with('CarAuction','d_model', 'd_brand')->orderBy('featured', 'desc')->where($col, 'like', '%' . $fill . '%')->where("user_id", "!=", session('userDetails')->id)->get();                } else {                    $result = $table::with('CarAuction','d_model', 'd_brand')->orderBy('featured', 'desc')->where($col, 'like', '%' . $fill . '%')->get();                }            } else {                if (!empty(session("userLoggedIn")) && session("userLoggedIn") == true) {                    $user_car = SwapCar::where("user_id", "=", session('userDetails')->id)->get();                    if (!empty($raw) && $raw !== "all") {                        $result = $table::with('CarAuction','d_model', 'd_brand')->orderBy('featured', 'desc')->where($col, 'like', '%' . $fill . '%')->where("user_id", "!=", session('userDetails')->id)->whereraw($raw)->get();                    } else {                        if ($type === "featured") {                            $result = $table::with('CarAuction','d_model', 'd_brand')->orderBy('created_at', 'desc')->where($col, 'like', '%' . $fill . '%')->where('featured', '=', '1')->where("user_id", "!=", session('userDetails')->id)->get();                        } else {                            $result = $table::with('CarAuction','d_model', 'd_brand')->orderBy('created_at', 'desc')->where($col, 'like', '%' . $fill . '%')->where('car_availbilty', '=', $type)->where("user_id", "!=", session('userDetails')->id)->get();                        }                    }                } else {                    if (!empty($raw) && $raw !== "all") {                        $result = $table::with('CarAuction','d_model', 'd_brand')->orderBy('featured', 'desc')->where($col, 'like', '%' . $fill . '%')->whereraw($raw)->get();                    } else {                        if ($type === "featured") {                            $result = $table::with('CarAuction','d_model', 'd_brand')->orderBy('created_at', 'desc')->where($col, 'like', '%' . $fill . '%')->where('featured', '=', '1')->get();                        } else {                            $result = $table::with('CarAuction','d_model', 'd_brand')->orderBy('created_at', 'desc')->where($col, 'like', '%' . $fill . '%')->where('car_availbilty', '=', $type)->get();                        }                    }                }            }        }        $user_car_id = array();        if (!empty($user_car)) {            foreach ($user_car as $s) {                $user_car_id[] = $s->swap_list_id;            }        }        if (!empty($result) && count($result) != 0) {            return response()->json(["status" => 1, "result" => $result, "user_car_id" => $user_car_id]);        }        return response()->json(["status" => 0, "result" => ""]);    }    public function dahsboardFilter($val, $con, request $request)    {        if ($val === "all") {            $type = new User_car();            $result = $type::with('CarAuction','d_model', 'd_brand')->where("user_id", '=', session('userDetails')->id)->where('car_condition', '=', $con)->get();        } else {            $type = new User_car();            $result = $type::with('CarAuction','d_model', 'd_brand')->where("user_id", '=', session('userDetails')->id)->where("car_availbilty", "=", $val)->where('car_condition', '=', $con)->get();        }        if (!empty($result) && count($result) != 0) {            return response()->json(["status" => 1, "result" => $result]);        } else {            return response()->json(["status" => 0, "result" => ""]);        }    }    public function swapCars($s_id, Request $request)    {        $id = base64_decode($s_id);        $count = User_car::where("car_availbilty", "=", "Swap")->get();        if (session("userLoggedIn") == true) {            $result_con = User_car::where('id', '=', $id)->where('user_id', '=', session('userDetails')->id)->first();            $list_car_con = SwapCar::where('swap_list_id', '=', $id)->where('user_id', '=', session('userDetails')->id)->where('status', '=', 1)->first();            $american = User_car::with("CarAuction")->orderBy('created_at', 'desc')->where('car_availbilty', '=', 'Auction')->first();            $bid_count = AuctionBid::where('car_id', $american->id)->count();            $classified = User_car::with('d_brand', 'd_model')->orderBy('created_at', 'desc')->where('car_availbilty', '=', 'Sell')->first();            if ($result_con == null && $list_car_con == null) {                $own = SwapCar::where('user_id', '=', session('userDetails')->id)->where('status', '=', 1)->get();                $swap_own_car = array();                if (!empty($own)) {                    foreach ($own as $s) {                        $swap_own_car[] = $s->swap_car_id;                    }                }                $result = User_car::with("model", "d_brand", "cartype", "carmake", "enginetype")->find($id);                $swap_cars = User_car::where('user_id', '=', session('userDetails')->id)->where('car_availbilty', '=', 'Swap')->paginate(9);                return view('frontend.swap-cars', ['result' => $result, 'swap_car' => $swap_cars, 'classified' => $classified, 'american_mas' => $american, 'selected_own_car' => $swap_own_car, 'count' => $count, 'bid_count' => $bid_count]);            } else {                $user_car = SwapCar::where("user_id", "=", session('userDetails')->id)->where('status', '=', 1)->get();                $user_car_id = array();                if (!empty($user_car)) {                    foreach ($user_car as $s) {                        $user_car_id[] = $s->swap_list_id;                    }                }                $swap_cars = User_car::where('user_id', '!=', session('userDetails')->id)->where('car_availbilty', '=', 'Swap')->paginate(9);                return view('frontend.swap-list', ["result" => $swap_cars, "selected" => $user_car_id]);            }        } else {            return redirect()->route("swap-login", ["sw" => "swap", "s_id" => base64_encode($id)]);        }    }    public function SwapPricing($p_id)    {        $result = User_car::with('d_brand', "model", "cartype", "carmake", "enginetype")->find($p_id);        if (!empty($result)) {            return response()->json(["status" => 1, "result" => $result]);        } else {            return response()->json(["status" => 0, "result" => ""]);        }    }    public function swapList(Request $request)    {        $tab = "Swap";        $type = new User_car();        $result = $type::where('car_availbilty', '=', 'Swap');        if (session("userLoggedIn") == true) {            $result = $result->OrderBy('created_at', 'desc')->where("user_id", "!=", session('userDetails')->id);        }        if (!empty(session("userLoggedIn")) && session("userLoggedIn") == true) {            $user_car = SwapCar::where("user_id", "=", session('userDetails')->id)->where('status', '=', 1)->get();        }        $user_car_id = array();        if (!empty($user_car)) {            foreach ($user_car as $s) {                $user_car_id[] = $s->swap_list_id;            }        }        $result = $result->paginate(9);        return view('frontend.swap-list', ["result" => $result, "selected" => $user_car_id]);    }    public function events()    {        $user_package = UserPackage::where('package_id', '=', 2)->first();        $package = $user_package->package;        return view('frontend.events', compact('package'));    }    public function newUsed($con, Request $request)    {        $table = new  User_car;        $user = $table::where('user_id', '=', session('userDetails')->id)->where('car_condition', '=', $con)->get();        if (!empty($user)) {            return response()->json(["status" => 1, "result" => $user]);        } else {            return response()->json(["status" => 0, "result" => ""]);        }    }    public function ankarFilter($con)    {        if ($con === "All") {            $result = User_car::orderBy('created_at', 'desc')->paginate(12);        } elseif ($con === "Featured") {            $result = User_car::orderBy('created_at', 'desc')->where("car_condition", "=", "Featured")->paginate(12);        } elseif ($con === "New") {            $result = User_car::orderBy('created_at', 'desc')->where("car_condition", "=", $con)->paginate(12);        } else {            $result = User_car::orderBy('created_at', 'desc')->where("car_condition", "=", $con)->paginate(12);        }        return view('frontend.home-filters', ['result' => $result]);    }    public function BrandFilterIndex($brand)    {        $brand = base64_decode($brand);        $result = User_car::orderBy('created_at', 'desc')->where('brand', '=', $brand)->paginate(12);        $query = "brand = '$brand'";        return view('frontend.home-filters', ['result' => $result, 'query' => $query, 'filter' => $brand]);    }    public function loadComment(Request $request)    {        if ($request->id > 0) {            $data = Comment::with('user')->            where('id', '<', $request->id)->where('post_id', '=', $request->post_id)                ->orderBy('id', 'DESC')                ->limit(5)                ->get();        } else {            $data = Comment::with('user')->            orderBy('id', 'DESC')->where('post_id', '=', $request->post_id)                ->limit(5)                ->get();        }        $output = '';        $last_id = '';        if (!$data->isEmpty()) {            foreach ($data as $com) {                $output .= '           <div class="col-12">                        <hr>                    </div>                    <div class="col-12 comment1section">                    </div>                    <div class="col-12">                        <div class="row">                            <div class="col-4 col-sm-1 col-lg-1 clientimages1"><img src="' . $com->user['avatar'] . '" alt="" ></div>                            <div class="col-6 clientName p-0">                                <h6>' . $com->user['username'] . '</h6>                                                        <p class="comment more">' . $com->comment . '</p>                            </div>                        </div>                    </div>';                $last_id = $com->id;            }            $output .= '       <div id="load_more">       <br>        <button type="button" name="load_more_button" class="btn btn-danger load-cmnt-btn form-control" data-id="' . $last_id . '" id="load_more_button">Load More</button>       </div>       ';        } else {            $output .= '       <div id="load_more">        <br>        <button type="button" name="load_more_button" class="btn btn-danger" style="background-color:#e4001b;color:#ffffff">No More Comments</button>       </div>       ';        }        echo $output;    }    public function loadCarComment(Request $request)    {        if ($request->id > 0) {            $data = CarComment::with('user')->            where('id', '<', $request->id)->where('car_id', '=', $request->car_id)                ->orderBy('id', 'DESC')                ->limit(5)                ->get();        } else {            $data = CarComment::with('user')->            orderBy('id', 'DESC')->where('car_id', '=', $request->car_id)                ->limit(5)                ->get();        }        $output = '';        $last_id = '';        if (!$data->isEmpty()) {            foreach ($data as $com) {                $output .= '           <div class="col-12">                        <hr>                    </div>                    <div class="col-12 comment1section">                    </div>                    <div class="col-12">                        <div class="row">                            <div class="col-4 col-sm-2 col-lg-2 clientimages"><img src="' . $com->user['avatar'] . '" alt=""></div>                            <div class="col-6 clientName p-0">                                <h6>' . $com->user['username'] . '</h6>                                                        <p class="comment more">'. $com->comment .'</p>                            </div>                        </div>                    </div>';                $last_id = $com->id;            }            $output .= '       <div id="load_more">       <br>        <button type="button" name="load_more_button" class="btn btn-danger form-control" data-id="' . $last_id . '" id="load_more_car_button">Load More</button>       </div>       ';        } else {            $output .= '       <div id="load_more">       <br>        <button type="button" name="load_more_button" class=" form-control load_car_comment" style="background-color:#e4001b;color:#ffffff">No More Comments</button>       </div>       ';        }        echo $output;    }    public function BrandBaseModel($id)    {        $result = CarSetting::where('brand', '=', $id)->where('_key', 'model')->orderBy('_value')->get();        if (!empty($result) && count($result) > 0) {            return response()->json(["status" => 1, "result" => $result]);        } else {            return response()->json(["status" => 0, "result" => ""]);        }    }    public function ModelBaseVariant($id)    {        $result = CarSetting::where('model', '=', $id)->where('_key', 'variant')->get();        if (!empty($result) && count($result) > 0) {            return response()->json(["status" => 1, "result" => $result]);        } else {            return response()->json(["status" => 0, "result" => ""]);        }    }    public function FeaturedCar()    {        $result = User_car::with('d_model', 'd_brand','CarAuction')->orderBy('created_at', 'desc')->Where('featured', '=', '1')->paginate(12);        return view('frontend.featured-car', compact('result'));    }    public function Brand()    {        $brands = Brand::orderBy('name')->get();        return view('frontend.brands', compact('brands'));    }    public function PPCNews($id)    {        $id = base64_decode($id);        $posts = Testimonial::where('id', $id)->first();        $sideposts = Testimonial::where('id', '!=', $id)->get();        return view('frontend.ppc-news-letter', compact('posts', 'sideposts'));    }    public function MileageFilterData($query)    {        $type = new User_car();        if ($query == "null") {            $result = $type::with('d_brand', 'd_model')->orderBy('created_at', 'desc')->get();        } else {            if (!empty(session("userLoggedIn")) && session("userLoggedIn") == true) {                $user_car = SwapCar::where("user_id", "=", session('userDetails')->id)->get();                $result = $type::with('d_brand', 'd_model')->where("user_id", "!=", session('userDetails')->id)->whereraw($query)->get();            } else {                $result = $type::with('d_brand', 'd_model')->whereraw($query)->get();            }        }        $user_car_id = array();        if (!empty($user_car)) {            foreach ($user_car as $s) {                $user_car_id[] = $s->swap_list_id;            }        }        if (!empty($result) && count($result) != 0) {            return response()->json(["status" => 1, "result" => $result, "user_car_id" => $user_car_id]);        }        return response()->json(["status" => 0, "result" => ""]);    }    public function FooterMail(Request $request)    {        $response = FooterMail::where('mail', $request->mail)->first();        if (!empty($response)) {            return response()->json(["status" => 2, "result" => "The mail has already been Subscribed."]);        } else {            $mail = new FooterMail();            $mail->mail = $request->mail;        }        if ($mail->save()) {            return response()->json(["status" => 1, "result" => "You Subscribe Successfully"]);        } else {            return response()->json(["status" => 0, "result" => "Something was Wrong"]);        }    }    public function get_tab(Request $request)    {        if ($request->tab === "currentpackage") {            $html = View::make('frontend.currentpack')->render();        } else if ($request->tab === "profilesection") {            $html = View::make('frontend.profiletab')->render();        } else {            $html = View::make('frontend.powercartab', ["form" => true])->render();        }        return $html;    }}